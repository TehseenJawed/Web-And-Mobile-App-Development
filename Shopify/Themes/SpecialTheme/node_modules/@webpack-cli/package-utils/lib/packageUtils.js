"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.promptInstallation = exports.packageExists = exports.getPathToGlobalPackages = exports.getPackageManager = void 0;
const fs_1 = __importDefault(require("fs"));
const path_1 = __importDefault(require("path"));
const execa_1 = require("execa");
const cross_spawn_1 = __importDefault(require("cross-spawn"));
const colorette_1 = require("colorette");
const enquirer_1 = require("enquirer");
const processUtils_1 = require("./processUtils");
function getPackageManager() {
    const hasLocalYarn = fs_1.default.existsSync(path_1.default.resolve(process.cwd(), 'yarn.lock'));
    const hasLocalNpm = fs_1.default.existsSync(path_1.default.resolve(process.cwd(), 'package-lock.json'));
    if (hasLocalYarn) {
        return 'yarn';
    }
    else if (hasLocalNpm) {
        return 'npm';
    }
    try {
        // if the sync function below fails because yarn is not installed,
        // an error will be thrown
        if (execa_1.sync('yarn', ['--version']).stdout) {
            return 'yarn';
        }
    }
    catch (e) {
        // Nothing
    }
    return 'npm';
}
exports.getPackageManager = getPackageManager;
/**
 *
 * Returns the path to globally installed
 * npm packages, depending on the available
 * package manager determined by `getPackageManager`
 *
 * @returns {String} path - Path to global node_modules folder
 */
function getPathToGlobalPackages() {
    const manager = exports.getPackageManager();
    if (manager === 'yarn') {
        try {
            const yarnDir = cross_spawn_1.default.sync('yarn', ['global', 'dir']).stdout.toString().trim();
            return path_1.default.join(yarnDir, 'node_modules');
        }
        catch (e) {
            // Default to the global npm path below
        }
    }
    return require('global-modules');
}
exports.getPathToGlobalPackages = getPathToGlobalPackages;
function packageExists(packageName) {
    try {
        require(packageName);
        return true;
    }
    catch (err) {
        return false;
    }
}
exports.packageExists = packageExists;
/**
 *
 * @param packageName
 * @param preMessage Message to show before the question
 */
// eslint-disable-next-line @typescript-eslint/explicit-function-return-type
async function promptInstallation(packageName, preMessage) {
    const packageManager = exports.getPackageManager();
    const options = [packageManager === 'yarn' ? 'add' : 'install', '-D', packageName];
    const commandToBeRun = `${packageManager} ${options.join(' ')}`;
    if (preMessage) {
        preMessage();
    }
    const question = `Would you like to install ${packageName}? (That will run ${colorette_1.green(commandToBeRun)})`;
    const { installConfirm } = await enquirer_1.prompt([
        {
            type: 'confirm',
            name: 'installConfirm',
            message: question,
            initial: 'Y',
        },
    ]);
    if (installConfirm) {
        await processUtils_1.runCommand(commandToBeRun);
        return exports.packageExists(packageName);
    }
    // eslint-disable-next-line require-atomic-updates
    process.exitCode = 2;
}
exports.promptInstallation = promptInstallation;
