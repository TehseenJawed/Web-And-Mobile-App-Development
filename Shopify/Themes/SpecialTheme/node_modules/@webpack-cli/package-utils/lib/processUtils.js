"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    Object.defineProperty(o, k2, { enumerable: true, get: function() { return m[k]; } });
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (k !== "default" && Object.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
    __setModuleDefault(result, mod);
    return result;
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.runCommand = exports.spawnChild = void 0;
const execa_1 = __importStar(require("execa"));
const packageUtils_1 = require("./packageUtils");
const path_1 = __importDefault(require("path"));
const fs_1 = __importDefault(require("fs"));
/**
 *
 * Spawns a new process using the respective package manager
 *
 * @param {String} pkg - The dependency to be installed
 * @param {Boolean} isNew - indicates if it needs to be updated or installed
 * @returns {Function} spawn - Installs the package
 */
function spawnWithArg(pkg, isNew) {
    const packageManager = packageUtils_1.getPackageManager();
    let options = [];
    if (packageManager === 'npm') {
        options = [isNew ? 'install' : 'update', '-g', pkg];
    }
    else {
        options = ['global', isNew ? 'add' : 'upgrade', pkg];
    }
    return execa_1.sync(packageManager, options, {
        stdio: 'inherit',
    });
}
/**
 *
 * Spawns a new process
 *
 */
function spawnChild(pkg) {
    const rootPath = packageUtils_1.getPathToGlobalPackages();
    const pkgPath = path_1.default.resolve(rootPath, pkg);
    const isNew = !fs_1.default.existsSync(pkgPath);
    return spawnWithArg(pkg, isNew);
}
exports.spawnChild = spawnChild;
async function runCommand(command, args = []) {
    try {
        await execa_1.default(command, args, {
            stdio: 'inherit',
            shell: true,
        });
    }
    catch (e) {
        throw new Error(e);
    }
}
exports.runCommand = runCommand;
